{
	"info": {
		"_postman_id": "7fe88e4b-4a96-4643-9019-6a5007e2c66e",
		"name": "Restful-Booker[Automation-Testing]",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21763310",
		"_collection_link": "https://www.postman.com/fariaafrin/workspace/public-workspace/collection/21763310-7fe88e4b-4a96-4643-9019-6a5007e2c66e?action=share&source=collection_link&creator=21763310"
	},
	"item": [
		{
			"name": "ATS01 Verify the Health Check (Ping) API Endpoint",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code\r",
							"console.log(statusCode)\r",
							"\r",
							"switch (statusCode) {\r",
							"    case 200:\r",
							"        pm.test('Status Code: 200 OK', function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"        break;\r",
							"    case 201:\r",
							"\r",
							"        // Connectivity Check if server is reachable\r",
							"        pm.test(\"Server is Reachable\", function () {\r",
							"            pm.expect(pm.response.code).to.not.eql(0);\r",
							"            });\r",
							"        // Status Code Validation\r",
							"        pm.test('Status Code: 201 Created', function () {\r",
							"            pm.response.to.have.status(201);\r",
							"        });\r",
							"\r",
							"        // Response Body Validation\r",
							"        pm.test('Response Body is as Expected', function(){\r",
							"            pm.expect(pm.response.text()).to.eql(\"Created\");\r",
							"        });\r",
							"\r",
							"        // Response Time Validation\r",
							"        pm.test('Response Time is Less Than 500ms', function(){\r",
							"            pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"            console.log('Response Time:', pm.response.responseTime, 'milisecond (ms)');\r",
							"        });\r",
							"\r",
							"\r",
							"        break;\r",
							"    case 202:\r",
							"        pm.test('Status Code: 202 Accepted', function () {\r",
							"            pm.response.to.have.status(202);\r",
							"        });\r",
							"        break;\r",
							"    case 301:\r",
							"        pm.test('Status Code: 301 Moved Permanently', function () {\r",
							"            pm.response.to.have.status(301);\r",
							"        });\r",
							"        break;\r",
							"    case 302:\r",
							"        pm.test('Status Code: 302 Found', function () {\r",
							"            pm.response.to.have.status(302);\r",
							"        });\r",
							"        break;\r",
							"    case 400:\r",
							"        pm.test('Status Code: 400 Bad Request', function () {\r",
							"            pm.response.to.have.status(400);\r",
							"        });\r",
							"        break;\r",
							"    case 401:\r",
							"        pm.test('Status Code: 401 Unauthorized', function () {\r",
							"            pm.response.to.have.status(401);\r",
							"        });\r",
							"        break;\r",
							"    case 403:\r",
							"        pm.test('Status Code: 403 Forbidden', function () {\r",
							"            pm.response.to.have.status(403);\r",
							"        });\r",
							"        break;\r",
							"    case 404:\r",
							"        pm.test('Status Code: 404 Not Found', function () {\r",
							"            pm.response.to.have.status(404);\r",
							"        });\r",
							"        break;\r",
							"    case 405:\r",
							"        pm.test('Status Code: 405 Method Not Allowed', function () {\r",
							"            pm.response.to.have.status(405);\r",
							"        });\r",
							"        break;\r",
							"    case 500:\r",
							"        pm.test('Status Code: 500 Internal Server Error', function () {\r",
							"            pm.response.to.have.status(500);\r",
							"        });\r",
							"        break;  \r",
							"    case 502:\r",
							"        pm.test('Status Code: 502 Bad Gateway', function () {\r",
							"            pm.response.to.have.status(502);\r",
							"        });\r",
							"        break;  \r",
							"    case 503:\r",
							"        pm.test('Status Code: 503 Service Unavailable', function () {\r",
							"            pm.response.to.have.status(503);\r",
							"        });\r",
							"        break;\r",
							"    default:\r",
							"        // This block will execute if none of the above cases match.\r",
							"        pm.test(\"Unexpected Status Code: \" + statusCode, function() {\r",
							"            pm.response.to.have.status(statusCode); // Verify the returned status code\r",
							"            });\r",
							"            console.error(\"Unexpected status code:\", statusCode); // Print unexpected status code in console\r",
							"        break;\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/ping",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"ping"
					]
				}
			},
			"response": []
		},
		{
			"name": "ATS02 Create a Token for Authentication ( PUT/PATCH and DELETE /booking)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code\r",
							"console.log(statusCode)\r",
							"\r",
							"\r",
							"switch (statusCode) {\r",
							"    case 200:\r",
							"\r",
							"        // Setting Access Token in Environment\r",
							"        var tokenvalue= pm.response.json().token;\r",
							"        pm.environment.set(\"token\", tokenvalue);\r",
							"        console.log(\"Token Value: \" + tokenvalue);\r",
							"\r",
							"\r",
							"        pm.test('Status Code: 200 OK', function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"        // Response time validation for Authentication Token Generation\r",
							"        pm.test('Response time should be less than 500ms', function(){\r",
							"            pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"            console.log('Response Time is '+ pm.response.responseTime + ' milisceond (ms)');\r",
							"        });\r",
							"\r",
							"        // Response body validation for Authentication Token Generation\r",
							"        pm.test('Response Body Contains \"token\"', function(){\r",
							"            // pm.expect(pm.response.to.have.jsonBody());\r",
							"            pm.response.to.have.jsonBody('token'); // The token is being regenerated with every click.\r",
							"        });\r",
							"\r",
							"        // Verify that Token is a non-empty string\r",
							"        pm.test(\"Token is a non-empty string\", function () {\r",
							"            pm.expect(pm.response.json().token).to.be.a('string').and.to.not.be.empty;\r",
							"        });\r",
							"\r",
							"        // Verify the Content Type for Authentication Token Generation\r",
							"        pm.test('Content Type is application/json', function(){\r",
							"            // pm.response.to.have.header('Content-Type','application/json');\r",
							"            pm.response.to.have.header('Content-Type','application/json; charset=utf-8'); // In the header, 'application/json; charset=utf-8' is the real value.\r",
							"        });\r",
							"\r",
							"\r",
							"        break;\r",
							"    case 201: \r",
							"        pm.test('Status Code: 201 Created', function () {\r",
							"            pm.response.to.have.status(201);\r",
							"        });\r",
							"        break;\r",
							"    case 202:\r",
							"        pm.test('Status Code: 202 Accepted', function () {\r",
							"            pm.response.to.have.status(202);\r",
							"        });\r",
							"        break;\r",
							"    case 301:\r",
							"        pm.test('Status Code: 301 Moved Permanently', function () {\r",
							"            pm.response.to.have.status(301);\r",
							"        });\r",
							"        break;\r",
							"    case 302:\r",
							"        pm.test('Status Code: 302 Found', function () {\r",
							"            pm.response.to.have.status(302);\r",
							"        });\r",
							"        break;\r",
							"    case 400:\r",
							"        pm.test('Status Code: 400 Bad Request', function () {\r",
							"            pm.response.to.have.status(400);\r",
							"        });\r",
							"        break;\r",
							"    case 401:\r",
							"        pm.test('Status Code: 401 Unauthorized', function () {\r",
							"            pm.response.to.have.status(401);\r",
							"        });\r",
							"        break;\r",
							"    case 403:\r",
							"        pm.test('Status Code: 403 Forbidden', function () {\r",
							"            pm.response.to.have.status(403);\r",
							"        });\r",
							"        break;\r",
							"    case 404:\r",
							"        pm.test('Status Code: 404 Not Found', function () {\r",
							"            pm.response.to.have.status(404); \r",
							"        });\r",
							"        break;\r",
							"    case 405:\r",
							"        pm.test('Status Code: 405 Method Not Allowed', function () {\r",
							"            pm.response.to.have.status(405);\r",
							"        });\r",
							"        break;\r",
							"    case 500:\r",
							"        pm.test('Status Code: 500 Internal Server Error', function () {\r",
							"            pm.response.to.have.status(500);\r",
							"        });\r",
							"        break;  \r",
							"    case 502:\r",
							"        pm.test('Status Code: 502 Bad Gateway', function () {\r",
							"            pm.response.to.have.status(502);\r",
							"        });\r",
							"        break;  \r",
							"    case 503:\r",
							"        pm.test('Status Code: 503 Service Unavailable', function () {\r",
							"            pm.response.to.have.status(503);\r",
							"        });\r",
							"        break;\r",
							"    default:\r",
							"        // This block will execute if none of the above cases match.\r",
							"        pm.test(\"Unexpected status code: \" + statusCode, function() {\r",
							"            pm.response.to.have.status(statusCode); // Verify the returned status code\r",
							"            });\r",
							"            console.error(\"Unexpected status code:\", statusCode); // Print unexpected status code in console\r",
							"        break;\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" : \"admin\",\r\n    \"password\" : \"password123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "ATS03 Create New Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code\r",
							"console.log(statusCode)\r",
							"\r",
							"switch (statusCode) {\r",
							"    case 200:\r",
							"\r",
							"        // Setting Booking ID in Environment\r",
							"        var bookingid= pm.response.json().bookingid;\r",
							"        // pm.collectionVariables.set(\"token\", tokenvalue);\r",
							"        pm.environment.set(\"bookingid\", bookingid);\r",
							"        console.log(\"Booking ID Value: \" + bookingid);\r",
							"\r",
							"\r",
							"        pm.test('Status Code: 200 OK', function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"        // Response Time Validation \r",
							"        pm.test('Response Time is Less Than 500ms', function(){\r",
							"            pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"            console.log('Response Time:', pm.response.responseTime, 'milisecond (ms)');\r",
							"        });\r",
							"     \r",
							"\r",
							"        // Response Body Validation by  Booking ID\r",
							"        pm.test('Response Body Contains the Booking ID', function(){\r",
							"            pm.response.to.have.jsonBody('bookingid');\r",
							"        });\r",
							"\r",
							" \r",
							"        // Verify that the returned fields match the expected/input value [Verify Data Integrity/ Verify All the Response Data]\r",
							"        pm.test('Returned Fields match with the Input value', function(){\r",
							"            // pm.response.to.have.jsonBodyContaining(\"firstname\" , \"Faria\");\r",
							"            const jsonData = pm.response.json();\r",
							"            // Log response for debugging\r",
							"            console.log(\"API Response:\", jsonData);\r",
							"            pm.expect(jsonData.booking.firstname).to.eql(\"Faria\");\r",
							"            pm.expect(jsonData.booking.lastname).to.eql(\"Afrin\");\r",
							"            pm.expect(jsonData.booking.totalprice).to.eql(5000);\r",
							"            pm.expect(jsonData.booking.depositpaid).to.eql(true);\r",
							"            pm.expect(jsonData.booking.bookingdates.checkin).to.eql(\"2025-01-01\");\r",
							"            pm.expect(jsonData.booking.bookingdates.checkout).to.eql(\"2025-01-30\");\r",
							"            pm.expect(jsonData.booking.additionalneeds).to.eql(\"Brunch\");\r",
							"        });\r",
							"\r",
							"\r",
							"        // Verify the 'Content-Type' Header in New Booking [Exact Match]\r",
							"        pm.test('Checking Header & Value = Content Type is application/json [Exact Match]', function(){\r",
							"            pm.response.to.have.header('Content-Type','application/json');\r",
							"        });\r",
							"\r",
							"        // Verify the 'Content-Type' Header in New Booking [Partial Match]\r",
							"        pm.test('Checking Header & Value = Content Type is application/json [Partial Match]', function(){\r",
							"            pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"        }); \r",
							"\r",
							"        // Verify the 'Accept' Header in New Booking\r",
							"        pm.test('Checking Header & Value = Accept is application/json', function(){\r",
							"            pm.response.to.have.header('Accept','application/json');\r",
							"        });\r",
							"\r",
							"        break;\r",
							"    case 201: \r",
							"        pm.test('Status Code: 201 Created', function () {\r",
							"            pm.response.to.have.status(201);\r",
							"        });\r",
							"        break;\r",
							"    case 202:\r",
							"        pm.test('Status Code: 202 Accepted', function () {\r",
							"            pm.response.to.have.status(202);\r",
							"        });\r",
							"        break;\r",
							"    case 301:\r",
							"        pm.test('Status Code: 301 Moved Permanently', function () {\r",
							"            pm.response.to.have.status(301);\r",
							"        });\r",
							"        break;\r",
							"    case 302:\r",
							"        pm.test('Status Code: 302 Found', function () {\r",
							"            pm.response.to.have.status(302);\r",
							"        });\r",
							"        break;\r",
							"    case 400:\r",
							"        pm.test('Status Code: 400 Bad Request', function () {\r",
							"            pm.response.to.have.status(400);\r",
							"        });\r",
							"        break;\r",
							"    case 401:\r",
							"        pm.test('Status Code: 401 Unauthorized', function () {\r",
							"            pm.response.to.have.status(401);\r",
							"        });\r",
							"        break;\r",
							"    case 403:\r",
							"        pm.test('Status Code: 403 Forbidden', function () {\r",
							"            pm.response.to.have.status(403);\r",
							"        });\r",
							"        break;\r",
							"    case 404:\r",
							"        pm.test('Status Code: 404 Not Found', function () {\r",
							"            pm.response.to.have.status(404);\r",
							"        });\r",
							"        break;\r",
							"    case 405:\r",
							"        pm.test('Status Code: 405 Method Not Allowed', function () {\r",
							"            pm.response.to.have.status(405);\r",
							"        });\r",
							"        break;\r",
							"    case 500:\r",
							"        pm.test('Status Code: 500 Internal Server Error', function () {\r",
							"            pm.response.to.have.status(500);\r",
							"        });\r",
							"        break;  \r",
							"    case 502:\r",
							"        pm.test('Status Code: 502 Bad Gateway', function () {\r",
							"            pm.response.to.have.status(502);\r",
							"        });\r",
							"        break;  \r",
							"    case 503:\r",
							"        pm.test('Status Code: 503 Service Unavailable', function () {\r",
							"            pm.response.to.have.status(503);\r",
							"        });\r",
							"        break;\r",
							"    default:\r",
							"        // This block will execute if none of the above cases match.\r",
							"        pm.test(\"Unexpected status code: \" + statusCode, function() {\r",
							"            pm.response.to.have.status(statusCode); // Verify the returned status code\r",
							"            });\r",
							"            console.error(\"Unexpected status code:\", statusCode); // Print unexpected status code in console\r",
							"        break;\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"Faria\",\r\n    \"lastname\" : \"Afrin\",\r\n    \"totalprice\" : 5000,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2025-01-01\",\r\n        \"checkout\" : \"2025-01-30\"\r\n    },\r\n    \"additionalneeds\" : \"Brunch\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking"
					]
				},
				"description": "#### API Documentation for Restful Booker (Rewst API)\n\nURL: StartFragment[https://restful-booker.herokuapp.com/bookingEndFragment](https://restful-booker.herokuapp.com/bookingEndFragment)"
			},
			"response": []
		},
		{
			"name": "ATS04 Retrieve Booking Details by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code\r",
							"console.log(statusCode)\r",
							"\r",
							"\r",
							"switch (statusCode) {\r",
							"    case 200:\r",
							"        // Validate Status Code\r",
							"        pm.test('Status Code: 200 OK', function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"        // Validate Response Time\r",
							"        pm.test('Response Time is Less Than 500ms', function(){\r",
							"            pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"            console.log('Response Time:', pm.response.responseTime, 'milisecond (ms)');\r",
							"        });\r",
							"\r",
							"        // Validate Response Body Structure\r",
							"        pm.test('Response Body Structure ', function(){\r",
							"            pm.response.to.have.jsonBody('firstname', 'Faria');\r",
							"            pm.response.to.have.jsonBody('lastname', 'Afrin');\r",
							"            pm.response.to.have.jsonBody('totalprice', 5000);\r",
							"            pm.response.to.have.jsonBody('depositpaid', true);\r",
							"            pm.response.to.have.jsonBody('bookingdates.checkin', \"2025-01-01\");\r",
							"            pm.response.to.have.jsonBody('bookingdates.checkout', \"2025-01-30\");\r",
							"            pm.response.to.have.jsonBody('additionalneeds', 'Brunch');\r",
							"        });\r",
							"\r",
							"        // Verify Field Values\r",
							"        pm.test('Returned Fields match with the Input value', function(){\r",
							"            const jsonData = pm.response.json();\r",
							"            // Log response for debugging\r",
							"            console.log(\"API Response:\", jsonData);\r",
							"            pm.expect(jsonData.firstname).to.eql(\"Faria\");\r",
							"            pm.expect(jsonData.lastname).to.eql(\"Afrin\");\r",
							"            pm.expect(jsonData.totalprice).to.eql(5000);\r",
							"            pm.expect(jsonData.depositpaid).to.eql(true);\r",
							"            pm.expect(jsonData.bookingdates.checkin).to.eql(\"2025-01-01\");\r",
							"            pm.expect(jsonData.bookingdates.checkout).to.eql(\"2025-01-30\");\r",
							"            pm.expect(jsonData.additionalneeds).to.eql(\"Brunch\");\r",
							"        });\r",
							"\r",
							"        // Validate 'Accept' Header\r",
							"        pm.test('Checking Header & Value = Accept is application/json', function(){\r",
							"            pm.response.to.have.header('Accept','application/json');\r",
							"        });\r",
							"\r",
							"        break;\r",
							"    case 201: \r",
							"        pm.test('Status Code: 201 Created', function () {\r",
							"            pm.response.to.have.status(201);\r",
							"        });\r",
							"        break;\r",
							"    case 202:\r",
							"        pm.test('Status Code: 202 Accepted', function () {\r",
							"            pm.response.to.have.status(202);\r",
							"        });\r",
							"        break;\r",
							"    case 301:\r",
							"        pm.test('Status Code: 301 Moved Permanently', function () {\r",
							"            pm.response.to.have.status(301);\r",
							"        });\r",
							"        break;\r",
							"    case 302:\r",
							"        pm.test('Status Code: 302 Found', function () {\r",
							"            pm.response.to.have.status(302);\r",
							"        });\r",
							"        break;\r",
							"    case 400:\r",
							"        pm.test('Status Code: 400 Bad Request', function () {\r",
							"            pm.response.to.have.status(400);\r",
							"        });\r",
							"        break;\r",
							"    case 401:\r",
							"        pm.test('Status Code: 401 Unauthorized', function () {\r",
							"            pm.response.to.have.status(401);\r",
							"        });\r",
							"        break;\r",
							"    case 403:\r",
							"        pm.test('Status Code: 403 Forbidden', function () {\r",
							"            pm.response.to.have.status(403);\r",
							"        });\r",
							"        break;\r",
							"    case 404:\r",
							"        pm.test('Status Code: 404 Not Found for Invalid Booking ID', function () {\r",
							"            pm.response.to.have.status(404); // Checking Status Code\r",
							"            pm.expect(pm.response.text()).to.include('Not Found');  // Checks if the response body contains the 'Not Found' message\r",
							"        });\r",
							"        break;\r",
							"    case 405:\r",
							"        pm.test('Status Code: 405 Method Not Allowed', function () {\r",
							"            pm.response.to.have.status(405);\r",
							"        });\r",
							"        break;\r",
							"    case 500:\r",
							"        pm.test('Status Code: 500 Internal Server Error', function () {\r",
							"            pm.response.to.have.status(500);\r",
							"        });\r",
							"        break;  \r",
							"    case 502:\r",
							"        pm.test('Status Code: 502 Bad Gateway', function () {\r",
							"            pm.response.to.have.status(502);\r",
							"        });\r",
							"        break;  \r",
							"    case 503:\r",
							"        pm.test('Status Code: 503 Service Unavailable', function () {\r",
							"            pm.response.to.have.status(503);\r",
							"        });\r",
							"        break;\r",
							"    default:\r",
							"        // This block will execute if none of the above cases match.\r",
							"        pm.test(\"Unexpected status code: \" + statusCode, function() {\r",
							"            pm.response.to.have.status(statusCode); // Verify the returned status code\r",
							"            });\r",
							"            console.error(\"Unexpected status code:\", statusCode); // Print unexpected status code in console\r",
							"        break;\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/booking/{{bookingid}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "ATS05 Update an Existing Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code\r",
							"console.log(statusCode)\r",
							"\r",
							"\r",
							"switch (statusCode) {\r",
							"    case 200:\r",
							"        pm.test('Updated Successfully! Status Code: 200 OK', function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"        // Validate Response Time \r",
							"        pm.test('Response Time is Less Than 500ms', function(){\r",
							"            pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"            console.log('Response Time:', pm.response.responseTime, 'milisecond (ms)');\r",
							"        });\r",
							"\r",
							"        // Validate Response Body Fileds/Structure or Verify all response fields after update\r",
							"        pm.test('Matched All Response Fields after Update ', function(){\r",
							"            pm.response.to.have.jsonBody('firstname', 'MD.');\r",
							"            pm.response.to.have.jsonBody('lastname', 'Faizan');\r",
							"            pm.response.to.have.jsonBody('totalprice', 1000);\r",
							"            pm.response.to.have.jsonBody('depositpaid', false);\r",
							"            pm.response.to.have.jsonBody('bookingdates.checkin', \"2018-01-01\");\r",
							"            pm.response.to.have.jsonBody('bookingdates.checkout', \"2019-01-01\");\r",
							"            pm.response.to.have.jsonBody('additionalneeds', 'Breakfast');\r",
							"        });\r",
							"        break;\r",
							"    case 201: \r",
							"        pm.test('Status Code: 201 Created', function () {\r",
							"            pm.response.to.have.status(201);\r",
							"        });\r",
							"        break;\r",
							"    case 202:\r",
							"        pm.test('Status Code: 202 Accepted', function () {\r",
							"            pm.response.to.have.status(202);\r",
							"        });\r",
							"        break;\r",
							"    case 301:\r",
							"        pm.test('Status Code: 301 Moved Permanently', function () {\r",
							"            pm.response.to.have.status(301);\r",
							"        });\r",
							"        break;\r",
							"    case 302:\r",
							"        pm.test('Status Code: 302 Found', function () {\r",
							"            pm.response.to.have.status(302);\r",
							"        });\r",
							"        break;\r",
							"    case 400:\r",
							"        pm.test('Status Code: 400 Bad Request', function () {\r",
							"            pm.response.to.have.status(400);\r",
							"        });\r",
							"        break;\r",
							"    case 401:\r",
							"        pm.test('Status Code: 401 Unauthorized', function () {\r",
							"            pm.response.to.have.status(401);\r",
							"        });\r",
							"        break;\r",
							"    case 403:\r",
							"        // Invalid Token Validation\r",
							"        pm.test('Authorization Required. The API Rejects Requests with Invalid Token. Status Code: 403 Forbidden', function () {\r",
							"            pm.response.to.have.status(403);\r",
							"        });\r",
							"        break;\r",
							"    case 404:\r",
							"        // Validate Invalid Booking ID\r",
							"        pm.test('Invalid Booking ID. Status Code: 404 Not Found', function () {\r",
							"            pm.response.to.have.status(404); \r",
							"        });\r",
							"        break;\r",
							"    case 405:\r",
							"        pm.test('Status Code: 405 Method Not Allowed', function () {\r",
							"            pm.response.to.have.status(405);\r",
							"        });\r",
							"        break;\r",
							"    case 500:\r",
							"        pm.test('Status Code: 500 Internal Server Error', function () {\r",
							"            pm.response.to.have.status(500);\r",
							"        });\r",
							"        break;  \r",
							"    case 502:\r",
							"        pm.test('Status Code: 502 Bad Gateway', function () {\r",
							"            pm.response.to.have.status(502);\r",
							"        });\r",
							"        break;  \r",
							"    case 503:\r",
							"        pm.test('Status Code: 503 Service Unavailable', function () {\r",
							"            pm.response.to.have.status(503);\r",
							"        });\r",
							"        break;\r",
							"    default:\r",
							"        // This block will execute if none of the above cases match.\r",
							"        pm.test(\"Unexpected status code: \" + statusCode, function() {\r",
							"            pm.response.to.have.status(statusCode); // Verify the returned status code\r",
							"            });\r",
							"            console.error(\"Unexpected status code:\", statusCode); // Print unexpected status code in console\r",
							"        break;\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Setting the token as Cookie dynamically\r",
							"var tokenValue = pm.environment.get(\"token\");  // Retrieve token from environment\r",
							"pm.environment.set(\"Cookie\", tokenValue); // Set token value in the Cookie variable\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{Cookie}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"MD.\",\r\n    \"lastname\" : \"Faizan\",\r\n    \"totalprice\" : 1000,\r\n    \"depositpaid\" : false,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}\r\n\r\n// {\r\n//     \"totalprice\" : 1000\r\n// }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking/{{bookingid}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check Booking Details after Updating Record (TS05)",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/booking/{{bookingid}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "ATS08  Partial Update Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code\r",
							"console.log(statusCode)\r",
							"\r",
							"\r",
							"switch (statusCode) {\r",
							"    case 200:\r",
							"        pm.test('Partially Updated Successfully! Status Code: 200 OK', function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"        // Validate Response Time\r",
							"        pm.test('Response Time is Less Than 500ms', function(){\r",
							"            pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"            console.log('Response Time:', pm.response.responseTime, 'milisecond (ms)');\r",
							"        });\r",
							"\r",
							"        break;\r",
							"    case 201: \r",
							"        pm.test('Status Code: 201 Created', function () {\r",
							"            pm.response.to.have.status(201);\r",
							"        });\r",
							"        break;\r",
							"    case 202:\r",
							"        pm.test('Status Code: 202 Accepted', function () {\r",
							"            pm.response.to.have.status(202);\r",
							"        });\r",
							"        break;\r",
							"    case 301:\r",
							"        pm.test('Status Code: 301 Moved Permanently', function () {\r",
							"            pm.response.to.have.status(301);\r",
							"        });\r",
							"        break;\r",
							"    case 302:\r",
							"        pm.test('Status Code: 302 Found', function () {\r",
							"            pm.response.to.have.status(302);\r",
							"        });\r",
							"        break;\r",
							"    case 400:\r",
							"        // Validate Missing Required Fields\r",
							"        pm.test('Missing Required Fields. Status Code: 400 Bad Request', function () {\r",
							"            pm.response.to.have.status(400);\r",
							"        });\r",
							"        break;\r",
							"    case 401:\r",
							"        pm.test('Status Code: 401 Unauthorized', function () {\r",
							"            pm.response.to.have.status(401);\r",
							"        });\r",
							"        break;\r",
							"    case 403:\r",
							"        // Validate Authorization Header\r",
							"        pm.test('Authorization Required. The API Rejects Requests with Invalid Token. Status Code: 403 Forbidden', function () {\r",
							"            pm.response.to.have.status(403);\r",
							"        });\r",
							"        break;\r",
							"    case 404:\r",
							"        // Validate Invalid Booking ID\r",
							"        pm.test('Invalid Booking ID. Status Code: 404 Not Found', function () {\r",
							"            pm.response.to.have.status(404); \r",
							"        });\r",
							"        break;\r",
							"    case 405:\r",
							"        pm.test('Status Code: 405 Method Not Allowed', function () {\r",
							"            pm.response.to.have.status(405);\r",
							"        });\r",
							"        break;\r",
							"    case 500:\r",
							"        pm.test('Status Code: 500 Internal Server Error', function () {\r",
							"            pm.response.to.have.status(500);\r",
							"        });\r",
							"        break;  \r",
							"    case 502:\r",
							"        pm.test('Status Code: 502 Bad Gateway', function () {\r",
							"            pm.response.to.have.status(502);\r",
							"        });\r",
							"        break;  \r",
							"    case 503:\r",
							"        pm.test('Status Code: 503 Service Unavailable', function () {\r",
							"            pm.response.to.have.status(503);\r",
							"        });\r",
							"        break;\r",
							"    default:\r",
							"        // This block will execute if none of the above cases match.\r",
							"        pm.test(\"Unexpected status code: \" + statusCode, function() {\r",
							"            pm.response.to.have.status(statusCode); // Verify the returned status code\r",
							"            });\r",
							"            console.error(\"Unexpected status code:\", statusCode); // Print unexpected status code in console\r",
							"        break;\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Setting the token as Cookie dynamically\r",
							"var tokenValue = pm.environment.get(\"token\");  // Retrieve token from environment\r",
							"pm.environment.set(\"Cookie\", tokenValue); // Set token value in the Cookie variable"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Cookie",
						"value": "token={{Cookie}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"Arora\",\r\n    \"lastname\" : \"Brownie\"\r\n}\r\n\r\n// Empty Payload is {}\r\n// {\r\n\r\n// }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/booking/{{bookingid}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "ATS06 Delete a Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var statusCode = pm.response.code\r",
							"console.log(statusCode)\r",
							"\r",
							"\r",
							"switch (statusCode) {\r",
							"    case 200:\r",
							"        // Validate Status Code\r",
							"        pm.test('Status Code: 200 OK', function () {\r",
							"            pm.response.to.have.status(200);\r",
							"        });\r",
							"\r",
							"        break;\r",
							"    case 201: \r",
							"        // Validate successful deletion\r",
							"        pm.test('Successfully Deleted Booking ID. Status Code: 201 Created', function () {\r",
							"            pm.response.to.have.status(201);\r",
							"        });\r",
							"\r",
							"        // Validate Resonse time\r",
							"        pm.test('Response Time is Less Than 500ms', function(){\r",
							"            pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"            console.log('Response Time:', pm.response.responseTime, 'milisecond (ms)');\r",
							"        });\r",
							"\r",
							"        break;\r",
							"    case 202:\r",
							"        pm.test('Status Code: 202 Accepted', function () {\r",
							"            pm.response.to.have.status(202);\r",
							"        });\r",
							"        break;\r",
							"    case 301:\r",
							"        pm.test('Status Code: 301 Moved Permanently', function () {\r",
							"            pm.response.to.have.status(301);\r",
							"        });\r",
							"        break;\r",
							"    case 302:\r",
							"        pm.test('Status Code: 302 Found', function () {\r",
							"            pm.response.to.have.status(302);\r",
							"        });\r",
							"        break;\r",
							"    case 400:\r",
							"        pm.test('Status Code: 400 Bad Request', function () {\r",
							"            pm.response.to.have.status(400);\r",
							"        });\r",
							"        break;\r",
							"    case 401:\r",
							"        pm.test('Status Code: 401 Unauthorized', function () {\r",
							"            pm.response.to.have.status(401);\r",
							"        });\r",
							"        break;\r",
							"    case 403:\r",
							"        pm.test('Status Code: 403 Forbidden', function () {\r",
							"            pm.response.to.have.status(403);\r",
							"        });\r",
							"        break;\r",
							"    case 404:\r",
							"        pm.test('Status Code: 404 Not Found', function () {\r",
							"            pm.response.to.have.status(404); \r",
							"        });\r",
							"        break;\r",
							"    case 405:\r",
							"        // Verify second delete attempt on same booking ID fails\r",
							"        // Validate deletion with invalid ID\r",
							"        pm.test('Deletion Fails for Same or Invalid Booking ID! Status Code: 405 Method Not Allowed', function () {\r",
							"            pm.response.to.have.status(405);\r",
							"        });\r",
							"        break;\r",
							"    case 500:\r",
							"        pm.test('Status Code: 500 Internal Server Error', function () {\r",
							"            pm.response.to.have.status(500);\r",
							"        });\r",
							"        break;  \r",
							"    case 502:\r",
							"        pm.test('Status Code: 502 Bad Gateway', function () {\r",
							"            pm.response.to.have.status(502);\r",
							"        });\r",
							"        break;  \r",
							"    case 503:\r",
							"        pm.test('Status Code: 503 Service Unavailable', function () {\r",
							"            pm.response.to.have.status(503);\r",
							"        });\r",
							"        break;\r",
							"    default:\r",
							"        // This block will execute if none of the above cases match.\r",
							"        pm.test(\"Unexpected status code: \" + statusCode, function() {\r",
							"            pm.response.to.have.status(statusCode); // Verify the returned status code\r",
							"            });\r",
							"            console.error(\"Unexpected status code:\", statusCode); // Print unexpected status code in console\r",
							"        break;\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Cookie",
						"value": "token={{Cookie}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/booking/{{bookingid}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check Booking Details after Deleting Record (TS06)",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/booking/{{bookingid}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"booking",
						"{{bookingid}}"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "token",
			"value": ""
		}
	]
}